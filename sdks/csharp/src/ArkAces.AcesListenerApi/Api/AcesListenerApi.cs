/* 
 * ACES Listener API
 *
 * API Specification for ACES Listeners that read data on a blockchain and forward transaction events to registered subscribers. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ArkAces.AcesListenerApi.Client;
using ArkAces.AcesListenerApi.Model;

namespace ArkAces.AcesListenerApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAcesListenerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Health</returns>
        Health StatusGet ();

        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Health</returns>
        ApiResponse<Health> StatusGetWithHttpInfo ();
        /// <summary>
        /// List Subscription Events
        /// </summary>
        /// <remarks>
        /// Gets a page of Subscription Events.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 SubscriptionsIdEventsGet (string id, int? pageSize = null, int? page = null, string continuation = null);

        /// <summary>
        /// List Subscription Events
        /// </summary>
        /// <remarks>
        /// Gets a page of Subscription Events.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> SubscriptionsIdEventsGetWithHttpInfo (string id, int? pageSize = null, int? page = null, string continuation = null);
        /// <summary>
        /// Gets Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by identifier.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Subscription</returns>
        Subscription SubscriptionsIdGet (string id);

        /// <summary>
        /// Gets Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by identifier.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> SubscriptionsIdGetWithHttpInfo (string id);
        /// <summary>
        /// Create a Resubscribe.
        /// </summary>
        /// <remarks>
        /// Resubscribes an inactive subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>SubscriptionResubscribe</returns>
        SubscriptionResubscribe SubscriptionsIdResubscribesPost (string id);

        /// <summary>
        /// Create a Resubscribe.
        /// </summary>
        /// <remarks>
        /// Resubscribes an inactive subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>ApiResponse of SubscriptionResubscribe</returns>
        ApiResponse<SubscriptionResubscribe> SubscriptionsIdResubscribesPostWithHttpInfo (string id);
        /// <summary>
        /// Create an Unsubscription.
        /// </summary>
        /// <remarks>
        /// Unsubscribes an active Subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>SubscriptionUnsubscribe</returns>
        SubscriptionUnsubscribe SubscriptionsIdUnsubscribesPost (string id);

        /// <summary>
        /// Create an Unsubscription.
        /// </summary>
        /// <remarks>
        /// Unsubscribes an active Subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>ApiResponse of SubscriptionUnsubscribe</returns>
        ApiResponse<SubscriptionUnsubscribe> SubscriptionsIdUnsubscribesPostWithHttpInfo (string id);
        /// <summary>
        /// Registers a subscriber node to receive blockchain events.
        /// </summary>
        /// <remarks>
        /// The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>Subscription</returns>
        Subscription SubscriptionsPost (SubscriptionRequest subscriptionRequest = null);

        /// <summary>
        /// Registers a subscriber node to receive blockchain events.
        /// </summary>
        /// <remarks>
        /// The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> SubscriptionsPostWithHttpInfo (SubscriptionRequest subscriptionRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Health</returns>
        System.Threading.Tasks.Task<Health> StatusGetAsync ();

        /// <summary>
        /// Get Health of node.
        /// </summary>
        /// <remarks>
        /// Get application health information.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Health)</returns>
        System.Threading.Tasks.Task<ApiResponse<Health>> StatusGetAsyncWithHttpInfo ();
        /// <summary>
        /// List Subscription Events
        /// </summary>
        /// <remarks>
        /// Gets a page of Subscription Events.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> SubscriptionsIdEventsGetAsync (string id, int? pageSize = null, int? page = null, string continuation = null);

        /// <summary>
        /// List Subscription Events
        /// </summary>
        /// <remarks>
        /// Gets a page of Subscription Events.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SubscriptionsIdEventsGetAsyncWithHttpInfo (string id, int? pageSize = null, int? page = null, string continuation = null);
        /// <summary>
        /// Gets Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by identifier.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> SubscriptionsIdGetAsync (string id);

        /// <summary>
        /// Gets Subscription
        /// </summary>
        /// <remarks>
        /// Get a Subscription by identifier.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> SubscriptionsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create a Resubscribe.
        /// </summary>
        /// <remarks>
        /// Resubscribes an inactive subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of SubscriptionResubscribe</returns>
        System.Threading.Tasks.Task<SubscriptionResubscribe> SubscriptionsIdResubscribesPostAsync (string id);

        /// <summary>
        /// Create a Resubscribe.
        /// </summary>
        /// <remarks>
        /// Resubscribes an inactive subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (SubscriptionResubscribe)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResubscribe>> SubscriptionsIdResubscribesPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Create an Unsubscription.
        /// </summary>
        /// <remarks>
        /// Unsubscribes an active Subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of SubscriptionUnsubscribe</returns>
        System.Threading.Tasks.Task<SubscriptionUnsubscribe> SubscriptionsIdUnsubscribesPostAsync (string id);

        /// <summary>
        /// Create an Unsubscription.
        /// </summary>
        /// <remarks>
        /// Unsubscribes an active Subscription.
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (SubscriptionUnsubscribe)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionUnsubscribe>> SubscriptionsIdUnsubscribesPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Registers a subscriber node to receive blockchain events.
        /// </summary>
        /// <remarks>
        /// The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> SubscriptionsPostAsync (SubscriptionRequest subscriptionRequest = null);

        /// <summary>
        /// Registers a subscriber node to receive blockchain events.
        /// </summary>
        /// <remarks>
        /// The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </remarks>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> SubscriptionsPostAsyncWithHttpInfo (SubscriptionRequest subscriptionRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AcesListenerApi : IAcesListenerApi
    {
        private ArkAces.AcesListenerApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AcesListenerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AcesListenerApi(String basePath)
        {
            this.Configuration = new ArkAces.AcesListenerApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ArkAces.AcesListenerApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AcesListenerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AcesListenerApi(ArkAces.AcesListenerApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ArkAces.AcesListenerApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ArkAces.AcesListenerApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArkAces.AcesListenerApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArkAces.AcesListenerApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Health</returns>
        public Health StatusGet ()
        {
             ApiResponse<Health> localVarResponse = StatusGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Health</returns>
        public ApiResponse< Health > StatusGetWithHttpInfo ()
        {

            var localVarPath = "/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Health>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Health) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Health)));
        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Health</returns>
        public async System.Threading.Tasks.Task<Health> StatusGetAsync ()
        {
             ApiResponse<Health> localVarResponse = await StatusGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Health of node. Get application health information.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Health)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Health>> StatusGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Health>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Health) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Health)));
        }

        /// <summary>
        /// List Subscription Events Gets a page of Subscription Events.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 SubscriptionsIdEventsGet (string id, int? pageSize = null, int? page = null, string continuation = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = SubscriptionsIdEventsGetWithHttpInfo(id, pageSize, page, continuation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscription Events Gets a page of Subscription Events.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > SubscriptionsIdEventsGetWithHttpInfo (string id, int? pageSize = null, int? page = null, string continuation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdEventsGet");

            var localVarPath = "/subscriptions/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (continuation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuation", continuation)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// List Subscription Events Gets a page of Subscription Events.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> SubscriptionsIdEventsGetAsync (string id, int? pageSize = null, int? page = null, string continuation = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await SubscriptionsIdEventsGetAsyncWithHttpInfo(id, pageSize, page, continuation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Subscription Events Gets a page of Subscription Events.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <param name="pageSize">Number of items to return per page. (optional, default to 100)</param>
        /// <param name="page">Zero-offset page number to return. (optional)</param>
        /// <param name="continuation">Continuation param for fetching next page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SubscriptionsIdEventsGetAsyncWithHttpInfo (string id, int? pageSize = null, int? page = null, string continuation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdEventsGet");

            var localVarPath = "/subscriptions/{id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (continuation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuation", continuation)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdEventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Gets Subscription Get a Subscription by identifier.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Subscription</returns>
        public Subscription SubscriptionsIdGet (string id)
        {
             ApiResponse<Subscription> localVarResponse = SubscriptionsIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Subscription Get a Subscription by identifier.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > SubscriptionsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdGet");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Gets Subscription Get a Subscription by identifier.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> SubscriptionsIdGetAsync (string id)
        {
             ApiResponse<Subscription> localVarResponse = await SubscriptionsIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Subscription Get a Subscription by identifier.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> SubscriptionsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdGet");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Create a Resubscribe. Resubscribes an inactive subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>SubscriptionResubscribe</returns>
        public SubscriptionResubscribe SubscriptionsIdResubscribesPost (string id)
        {
             ApiResponse<SubscriptionResubscribe> localVarResponse = SubscriptionsIdResubscribesPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Resubscribe. Resubscribes an inactive subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>ApiResponse of SubscriptionResubscribe</returns>
        public ApiResponse< SubscriptionResubscribe > SubscriptionsIdResubscribesPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdResubscribesPost");

            var localVarPath = "/subscriptions/{id}/resubscribes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdResubscribesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionResubscribe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionResubscribe) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionResubscribe)));
        }

        /// <summary>
        /// Create a Resubscribe. Resubscribes an inactive subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of SubscriptionResubscribe</returns>
        public async System.Threading.Tasks.Task<SubscriptionResubscribe> SubscriptionsIdResubscribesPostAsync (string id)
        {
             ApiResponse<SubscriptionResubscribe> localVarResponse = await SubscriptionsIdResubscribesPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Resubscribe. Resubscribes an inactive subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (SubscriptionResubscribe)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionResubscribe>> SubscriptionsIdResubscribesPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdResubscribesPost");

            var localVarPath = "/subscriptions/{id}/resubscribes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdResubscribesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionResubscribe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionResubscribe) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionResubscribe)));
        }

        /// <summary>
        /// Create an Unsubscription. Unsubscribes an active Subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>SubscriptionUnsubscribe</returns>
        public SubscriptionUnsubscribe SubscriptionsIdUnsubscribesPost (string id)
        {
             ApiResponse<SubscriptionUnsubscribe> localVarResponse = SubscriptionsIdUnsubscribesPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Unsubscription. Unsubscribes an active Subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>ApiResponse of SubscriptionUnsubscribe</returns>
        public ApiResponse< SubscriptionUnsubscribe > SubscriptionsIdUnsubscribesPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdUnsubscribesPost");

            var localVarPath = "/subscriptions/{id}/unsubscribes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdUnsubscribesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionUnsubscribe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionUnsubscribe) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionUnsubscribe)));
        }

        /// <summary>
        /// Create an Unsubscription. Unsubscribes an active Subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of SubscriptionUnsubscribe</returns>
        public async System.Threading.Tasks.Task<SubscriptionUnsubscribe> SubscriptionsIdUnsubscribesPostAsync (string id)
        {
             ApiResponse<SubscriptionUnsubscribe> localVarResponse = await SubscriptionsIdUnsubscribesPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Unsubscription. Unsubscribes an active Subscription.
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Subscription Identifier</param>
        /// <returns>Task of ApiResponse (SubscriptionUnsubscribe)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionUnsubscribe>> SubscriptionsIdUnsubscribesPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AcesListenerApi->SubscriptionsIdUnsubscribesPost");

            var localVarPath = "/subscriptions/{id}/unsubscribes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsIdUnsubscribesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionUnsubscribe>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionUnsubscribe) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionUnsubscribe)));
        }

        /// <summary>
        /// Registers a subscriber node to receive blockchain events. The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription SubscriptionsPost (SubscriptionRequest subscriptionRequest = null)
        {
             ApiResponse<Subscription> localVarResponse = SubscriptionsPostWithHttpInfo(subscriptionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Registers a subscriber node to receive blockchain events. The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > SubscriptionsPostWithHttpInfo (SubscriptionRequest subscriptionRequest = null)
        {

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionRequest != null && subscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Registers a subscriber node to receive blockchain events. The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> SubscriptionsPostAsync (SubscriptionRequest subscriptionRequest = null)
        {
             ApiResponse<Subscription> localVarResponse = await SubscriptionsPostAsyncWithHttpInfo(subscriptionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Registers a subscriber node to receive blockchain events. The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
        /// </summary>
        /// <exception cref="ArkAces.AcesListenerApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionRequest">The request to create a new Subscription. (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> SubscriptionsPostAsyncWithHttpInfo (SubscriptionRequest subscriptionRequest = null)
        {

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionRequest != null && subscriptionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionRequest; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

    }
}
