/* 
 * ACES Listener API
 *
 * API Specification for ACES Listeners that read data on a blockchain and forward transaction events to registered subscribers. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ArkAces.AcesListenerApi.Client.SwaggerDateConverter;

namespace ArkAces.AcesListenerApi.Model
{
    /// <summary>
    /// SubscriptionRequest
    /// </summary>
    [DataContract]
    public partial class SubscriptionRequest :  IEquatable<SubscriptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionRequest" /> class.
        /// </summary>
        /// <param name="callbackUrl">Target target URL to POST Encoded Listener events to. (required).</param>
        /// <param name="minConfirmations">Confirmations required before event is sent to subscriber. (required).</param>
        /// <param name="recipientAddress">recipientAddress.</param>
        public SubscriptionRequest(string callbackUrl = default(string), int? minConfirmations = default(int?), string recipientAddress = default(string))
        {
            // to ensure "callbackUrl" is required (not null)
            if (callbackUrl == null)
            {
                throw new InvalidDataException("callbackUrl is a required property for SubscriptionRequest and cannot be null");
            }
            else
            {
                this.CallbackUrl = callbackUrl;
            }
            // to ensure "minConfirmations" is required (not null)
            if (minConfirmations == null)
            {
                throw new InvalidDataException("minConfirmations is a required property for SubscriptionRequest and cannot be null");
            }
            else
            {
                this.MinConfirmations = minConfirmations;
            }
            this.RecipientAddress = recipientAddress;
        }
        
        /// <summary>
        /// Target target URL to POST Encoded Listener events to.
        /// </summary>
        /// <value>Target target URL to POST Encoded Listener events to.</value>
        [DataMember(Name="callbackUrl", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Confirmations required before event is sent to subscriber.
        /// </summary>
        /// <value>Confirmations required before event is sent to subscriber.</value>
        [DataMember(Name="minConfirmations", EmitDefaultValue=false)]
        public int? MinConfirmations { get; set; }

        /// <summary>
        /// Gets or Sets RecipientAddress
        /// </summary>
        [DataMember(Name="recipientAddress", EmitDefaultValue=false)]
        public string RecipientAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionRequest {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  MinConfirmations: ").Append(MinConfirmations).Append("\n");
            sb.Append("  RecipientAddress: ").Append(RecipientAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionRequest);
        }

        /// <summary>
        /// Returns true if SubscriptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.MinConfirmations == input.MinConfirmations ||
                    (this.MinConfirmations != null &&
                    this.MinConfirmations.Equals(input.MinConfirmations))
                ) && 
                (
                    this.RecipientAddress == input.RecipientAddress ||
                    (this.RecipientAddress != null &&
                    this.RecipientAddress.Equals(input.RecipientAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.MinConfirmations != null)
                    hashCode = hashCode * 59 + this.MinConfirmations.GetHashCode();
                if (this.RecipientAddress != null)
                    hashCode = hashCode * 59 + this.RecipientAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
