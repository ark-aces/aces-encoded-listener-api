# coding: utf-8

"""
    ACES Listener API

    API Specification for ACES Listeners that read data on a blockchain and forward transaction events to registered subscribers.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callback_url': 'str',
        'min_confirmations': 'int',
        'recipient_address': 'str'
    }

    attribute_map = {
        'callback_url': 'callbackUrl',
        'min_confirmations': 'minConfirmations',
        'recipient_address': 'recipientAddress'
    }

    def __init__(self, callback_url=None, min_confirmations=None, recipient_address=None):  # noqa: E501
        """SubscriptionRequest - a model defined in Swagger"""  # noqa: E501

        self._callback_url = None
        self._min_confirmations = None
        self._recipient_address = None
        self.discriminator = None

        self.callback_url = callback_url
        self.min_confirmations = min_confirmations
        if recipient_address is not None:
            self.recipient_address = recipient_address

    @property
    def callback_url(self):
        """Gets the callback_url of this SubscriptionRequest.  # noqa: E501

        Target target URL to POST Encoded Listener events to.  # noqa: E501

        :return: The callback_url of this SubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this SubscriptionRequest.

        Target target URL to POST Encoded Listener events to.  # noqa: E501

        :param callback_url: The callback_url of this SubscriptionRequest.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def min_confirmations(self):
        """Gets the min_confirmations of this SubscriptionRequest.  # noqa: E501

        Confirmations required before event is sent to subscriber.  # noqa: E501

        :return: The min_confirmations of this SubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_confirmations

    @min_confirmations.setter
    def min_confirmations(self, min_confirmations):
        """Sets the min_confirmations of this SubscriptionRequest.

        Confirmations required before event is sent to subscriber.  # noqa: E501

        :param min_confirmations: The min_confirmations of this SubscriptionRequest.  # noqa: E501
        :type: int
        """
        if min_confirmations is None:
            raise ValueError("Invalid value for `min_confirmations`, must not be `None`")  # noqa: E501

        self._min_confirmations = min_confirmations

    @property
    def recipient_address(self):
        """Gets the recipient_address of this SubscriptionRequest.  # noqa: E501


        :return: The recipient_address of this SubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._recipient_address

    @recipient_address.setter
    def recipient_address(self, recipient_address):
        """Sets the recipient_address of this SubscriptionRequest.


        :param recipient_address: The recipient_address of this SubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._recipient_address = recipient_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
