# coding: utf-8

"""
    ACES Listener API

    API Specification for ACES Listeners that read data on a blockchain and forward transaction events to registered subscribers.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'status': 'str',
        'tries': 'int',
        'transaction_id': 'str',
        'data': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'status': 'status',
        'tries': 'tries',
        'transaction_id': 'transactionId',
        'data': 'data'
    }

    def __init__(self, id=None, created_at=None, status=None, tries=None, transaction_id=None, data=None):  # noqa: E501
        """SubscriptionEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._status = None
        self._tries = None
        self._transaction_id = None
        self._data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if status is not None:
            self.status = status
        if tries is not None:
            self.tries = tries
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if data is not None:
            self.data = data

    @property
    def id(self):
        """Gets the id of this SubscriptionEvent.  # noqa: E501

        Subscription Event identifier  # noqa: E501

        :return: The id of this SubscriptionEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionEvent.

        Subscription Event identifier  # noqa: E501

        :param id: The id of this SubscriptionEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this SubscriptionEvent.  # noqa: E501

        Date the Subscription Event was created.  # noqa: E501

        :return: The created_at of this SubscriptionEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubscriptionEvent.

        Date the Subscription Event was created.  # noqa: E501

        :param created_at: The created_at of this SubscriptionEvent.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this SubscriptionEvent.  # noqa: E501


        :return: The status of this SubscriptionEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionEvent.


        :param status: The status of this SubscriptionEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "delivered", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tries(self):
        """Gets the tries of this SubscriptionEvent.  # noqa: E501


        :return: The tries of this SubscriptionEvent.  # noqa: E501
        :rtype: int
        """
        return self._tries

    @tries.setter
    def tries(self, tries):
        """Sets the tries of this SubscriptionEvent.


        :param tries: The tries of this SubscriptionEvent.  # noqa: E501
        :type: int
        """

        self._tries = tries

    @property
    def transaction_id(self):
        """Gets the transaction_id of this SubscriptionEvent.  # noqa: E501

        Transaction id blockchain event.  # noqa: E501

        :return: The transaction_id of this SubscriptionEvent.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this SubscriptionEvent.

        Transaction id blockchain event.  # noqa: E501

        :param transaction_id: The transaction_id of this SubscriptionEvent.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def data(self):
        """Gets the data of this SubscriptionEvent.  # noqa: E501

        Event data encoded as a Json string.  # noqa: E501

        :return: The data of this SubscriptionEvent.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SubscriptionEvent.

        Event data encoded as a Json string.  # noqa: E501

        :param data: The data of this SubscriptionEvent.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
