/*
 * ACES Listener API
 * API Specification for ACES Listeners that read data on a blockchain and forward transaction events to registered subscribers. 
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.arkaces.aces_listener_api;

import com.arkaces.ApiException;
import io.swagger.client.model.Health;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.NotFoundError;
import io.swagger.client.model.Subscription;
import io.swagger.client.model.SubscriptionRequest;
import io.swagger.client.model.SubscriptionResubscribe;
import io.swagger.client.model.SubscriptionUnsubscribe;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AcesListenerApi
 */
@Ignore
public class AcesListenerApiTest {

    private final AcesListenerApi api = new AcesListenerApi();

    
    /**
     * Get Health of node.
     *
     * Get application health information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statusGetTest() throws ApiException {
        Health response = api.statusGet();

        // TODO: test validations
    }
    
    /**
     * List Subscription Events
     *
     * Gets a page of Subscription Events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdEventsGetTest() throws ApiException {
        String id = null;
        Integer pageSize = null;
        Integer page = null;
        String continuation = null;
        InlineResponse200 response = api.subscriptionsIdEventsGet(id, pageSize, page, continuation);

        // TODO: test validations
    }
    
    /**
     * Gets Subscription
     *
     * Get a Subscription by identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdGetTest() throws ApiException {
        String id = null;
        Subscription response = api.subscriptionsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Create a Resubscribe.
     *
     * Resubscribes an inactive subscription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdResubscribesPostTest() throws ApiException {
        String id = null;
        SubscriptionResubscribe response = api.subscriptionsIdResubscribesPost(id);

        // TODO: test validations
    }
    
    /**
     * Create an Unsubscription.
     *
     * Unsubscribes an active Subscription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsIdUnsubscribesPostTest() throws ApiException {
        String id = null;
        SubscriptionUnsubscribe response = api.subscriptionsIdUnsubscribesPost(id);

        // TODO: test validations
    }
    
    /**
     * Registers a subscriber node to receive blockchain events.
     *
     * The Subscribers endpoint allows subscriber to register their node to receive blockchain events from the Encoded Listener. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionsPostTest() throws ApiException {
        SubscriptionRequest subscriptionRequest = null;
        Subscription response = api.subscriptionsPost(subscriptionRequest);

        // TODO: test validations
    }
    
}
