/**
 * ACES Listener API
 * API Specification for ACES Listeners that read data on a blockchain and forward transaction events to registered subscribers. 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FieldError', 'model/Health', 'model/InlineResponse200', 'model/NotFoundError', 'model/Subscription', 'model/SubscriptionEvent', 'model/SubscriptionRequest', 'model/SubscriptionResubscribe', 'model/SubscriptionUnsubscribe', 'model/ValidationError', 'arkaces-listener-client/AcesListenerApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/FieldError'), require('./model/Health'), require('./model/InlineResponse200'), require('./model/NotFoundError'), require('./model/Subscription'), require('./model/SubscriptionEvent'), require('./model/SubscriptionRequest'), require('./model/SubscriptionResubscribe'), require('./model/SubscriptionUnsubscribe'), require('./model/ValidationError'), require('./arkaces-listener-client/AcesListenerApi'));
  }
}(function(ApiClient, FieldError, Health, InlineResponse200, NotFoundError, Subscription, SubscriptionEvent, SubscriptionRequest, SubscriptionResubscribe, SubscriptionUnsubscribe, ValidationError, AcesListenerApi) {
  'use strict';

  /**
   * API_Specification_for_ACES_Listeners_that_read_data_on_a_blockchain_andforward_transaction_events_to_registered_subscribers_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var AcesListenerApi = require('index'); // See note below*.
   * var xxxSvc = new AcesListenerApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new AcesListenerApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new AcesListenerApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new AcesListenerApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The FieldError model constructor.
     * @property {module:model/FieldError}
     */
    FieldError: FieldError,
    /**
     * The Health model constructor.
     * @property {module:model/Health}
     */
    Health: Health,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The NotFoundError model constructor.
     * @property {module:model/NotFoundError}
     */
    NotFoundError: NotFoundError,
    /**
     * The Subscription model constructor.
     * @property {module:model/Subscription}
     */
    Subscription: Subscription,
    /**
     * The SubscriptionEvent model constructor.
     * @property {module:model/SubscriptionEvent}
     */
    SubscriptionEvent: SubscriptionEvent,
    /**
     * The SubscriptionRequest model constructor.
     * @property {module:model/SubscriptionRequest}
     */
    SubscriptionRequest: SubscriptionRequest,
    /**
     * The SubscriptionResubscribe model constructor.
     * @property {module:model/SubscriptionResubscribe}
     */
    SubscriptionResubscribe: SubscriptionResubscribe,
    /**
     * The SubscriptionUnsubscribe model constructor.
     * @property {module:model/SubscriptionUnsubscribe}
     */
    SubscriptionUnsubscribe: SubscriptionUnsubscribe,
    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError: ValidationError,
    /**
     * The AcesListenerApi service constructor.
     * @property {module:arkaces-listener-client/AcesListenerApi}
     */
    AcesListenerApi: AcesListenerApi
  };

  return exports;
}));
